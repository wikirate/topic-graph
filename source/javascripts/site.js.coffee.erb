$.fn.select2.defaults.set("theme", "bootstrap4")

API_HOST_CACHED = "https://wikirate.org/cached"
API_HOST_LIVE = "https://wikirate.org"

topicGraph = null
editor = null

DataSource =
  live: 1
  cached: 2

EdgeFormula =
  simple: 1
  topic_count : 2
  bookmarks: 3

NodeFormula =
  metrics: 1
  bookmarks: 2

configs = {
  default:
    font_size: 20
    node_size: 1
    edge_size: 1
    edge_formula: EdgeFormula.topic_count
    node_formula: NodeFormula.metrics
    edge_threshold: 2
    node_threshold: 2
    colorful: false
  solar:
    font_size: 20
    node_size: 1
    edge_size: 1
    edge_formula: EdgeFormula.topic_count
    node_formula: NodeFormula.metrics
    edge_threshold: 2
    node_threshold: 130
    colorful: false
  chaos:
    font_size: 20
    node_size: 1
    edge_size: 1
    edge_formula: EdgeFormula.simple
    node_formula: NodeFormula.metrics
    edge_threshold: 1
    node_threshold: 1
    colorful: true
  elite_connections:
    font_size: 20
    node_size: 1
    edge_size: 1
    edge_formula: EdgeFormula.topic_count
    node_formula: NodeFormula.metrics
    edge_threshold: 1.5
    node_threshold: 10
    colorful: false
}

initAce = () ->
  editor = ace.edit("editor");
  editor.setTheme("ace/theme/github");
  editor.setOption('showLineNumbers', false);
  editor.session.setMode("ace/mode/yaml");
  editor.resize()

$(document).ready ->
  $("#configs").select2()
  initAce()
  container = document.getElementById("topicgraph")
  # initGraph(metrics, topics, container)
  fetchData(API_HOST_CACHED)

  $("body").on "change", "._edge-threshold", ->
    topicGraph.options.edge_threshold = parseFloat($(this).val())
    topicGraph.updateEdges()
    update()

  $("body").on "change", "._node-threshold", ->
    topicGraph.options.node_threshold = parseFloat($(this).val())
    topicGraph.updateNodes()
    update()

  $("body").on "change", "._font-size", ->
    topicGraph.options.font_size = parseInt($(this).val())
    update()

  $("body").on "change", "._edge-size", ->
    topicGraph.options.edge_size = parseFloat($(this).val())
    topicGraph.updateEdges()
    update()

  $("body").on "change", "._node-size", ->
    topicGraph.options.node_size = parseFloat($(this).val())
    topicGraph.updateNodes()
    update()

  $("body").on "change", "#configs", ->
    selected = $(this).select2("data")
    topicGraph.loadConfig(configs[selected[0].id])
    topicGraph.updateEdges()
    topicGraph.updateNodes()
    update()

  $("body").on "change", "._colorful", ->
    topicGraph.options.colorful = this.checked
    topicGraph.updateNodes()
    update()

  $("body").on "click", "._apply-config", ->
    topicGraph.setVisConfig(editor.getValue())
    topicGraph.render()

  $("body").on "change", "._connection-formula", ->
    topicGraph.options.edge_formula = parseInt($('input._connection-formula:checked').val())
    topicGraph.updateEdges()
    update()

  $("body").on "change", "._node-formula", ->
    debugger
    topicGraph.options.node_formula = parseInt($('input._node-formula:checked').val())
    topicGraph.updateNodes()
    update()

  $("body").on "change", "._data-source", ->
    source = parseInt($('input._data-source:checked').val())
    if (source == DataSource.live)
      fetchData(API_HOST_LIVE)
    else
      fetchData(API_HOST_CACHED)


VAL_FIELDS = {
  edge_threshold: "edge-threshold"
  node_threshold: "node-threshold"
  font_size: "font-size"
  node_size: "node-size"
  edge_size: "edge-size"
}

initGraph = (metrics, topics, container) ->
  topicGraph = new TopicGraph(metrics, topics, container)
  for option, css_class of VAL_FIELDS
    $("._#{css_class}").val(topicGraph.options[option])

  $("input._connection-formula[value='#{topicGraph.options.edge_formula}']").prop("checked", true)
  $("input._node-formula[value='#{topicGraph.options.node_formula}']").prop("checked", true)
  $("._colorful").prop("checked", topicGraph.options.colorful)
  topicGraph.updateEdges()
  topicGraph.updateNodes()
  editor.setValue(topicGraph.getVisConfig())
  update()

update = () ->
  topicGraph.render()
  for option, value of topicGraph.options
    $("._#{VAL_FIELDS[option]}").val(value)
  $("._topic-count").text(topicGraph.topic_count)
  $("._topic-connection-count").text(topicGraph.topic_connection_count)
  $("._edge-count").text(topicGraph.edges.length)
  $("._node-count").text(topicGraph.nodes.length)

fetchData = (host) ->
  $.ajax(
    url: "#{host}/Metric.json?limit=0",
    cache: false,
    dataType: "json",
    type: "GET",
    crossDomain: true,
    headers: {
      accept: "application/json",
  }).done (metricData) ->
    $.ajax(url: "#{host}/Topic.json?limit=0",
      cache: false,
      dataType: "json",
      crossDomain: true,
      headers: {
        accept: "application/json",
    }).done (topicData) ->
      container = document.getElementById("topicgraph")
      initGraph(metricData, topicData, container)
